// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User{
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  name  String?
  username  String @unique
  email  String
  verified Boolean
  password String
  profileImage String?
  refreshToken RefreshToken[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tweets Tweet[]

  media mediaFile[]
}

model RefreshToken {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId 
  user User @relation(fields: [userId], references: [id])
  token String @unique
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Tweet {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  text String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //USER
  author User @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId

  replyTo Tweet? @relation("replies", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replyToId String? @db.ObjectId
  replies Tweet[] @relation("replies")

  media mediaFile[]

}

model mediaFile {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  url String
  providerId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  tweetId String? @db.ObjectId
  tweet Tweet? @relation(fields: [tweetId], references: [id]) 
}
